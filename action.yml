name: "Lean Standard CI"
description: |
  Standard CI for Lean projects. 
  Installs elan, (optionally) gets Mathlib cache, builds, tests, and (optionally) lints the project
inputs:
  test:
    description: |
      Run lake test.
      Allowed values: "true" or "false". Defaults to "true"
    required: false
    default: "true"
  mathlib-cache:
    description: |
      Run "lake exe cache get" before build.
      Must be downstream of Mathlib
      Allowed values: "true" or "false". Defaults to "false"
    required: false
    default: "false"
  lake-cache:
    description: |
      Use the cache action to cache the contents of .lake between builds.
      Allowed values: "true" or "false". Defaults to "false"
    required: false
    default: "false"
  lint-module:
    description: |
      Run "lake exe runLinter" on the specified module.
      Allowed values: name of module to lint. If no module is provide linter will not run.
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - name: install elan
      run: |
        set -o pipefail
        curl -sSfL https://github.com/leanprover/elan/releases/download/v1.4.2/elan-x86_64-unknown-linux-gnu.tar.gz | tar xz
        ./elan-init -y --default-toolchain none
        echo "$HOME/.elan/bin" >> $GITHUB_PATH
      shell: bash

    - uses: actions/checkout@v4

    - name: look for mathlib
      id: look-for-mathlib
      run: |
        echo "Looking for mathlib dependency"
        if grep -q "require mathlib" lakefile.lean; then
          echo "EXISTS=true" >> "$GITHUB_OUTPUT"
          echo "Mathlib dependency found. Using Mathlib cache."
        else
          echo "Mathlib dependency not found. Skipping Mathlib cache."
        fi
      shell: bash
    - uses: actions/cache@v3
      with:
        path: .lake
        key: ${{ runner.os }}-lake-${{ github.sha }}
        # if no cache hit, fall back to the (latest) previous cache
        restore-keys: ${{ runner.os }}-lake-

    - name: get mathlib cache
      if: ${{ steps.look-for-mathlib.outputs.EXISTS == 'true' || inputs.mathlib-cache == 'true' }}
      run: lake exe cache get
      shell: bash

    - name: build ${{ github.repository }}
      run: lake build
      shell: bash

    - name: test ${{ github.repository }}
      if: ${{ inputs.test == 'true' }}
      run: lake test
      shell: bash

    - name: lint ${{ github.repository }}
      if: ${{ inputs.lint-module != '' }}
      run: lake exe runLinter ${{ inputs.lint-module }}
      shell: bash
